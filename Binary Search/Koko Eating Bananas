class Solution {
    int max(int[]piles,int n){
        int maxValue=piles[0];
        for(int i=1;i<n;i++)
            maxValue=Math.max(piles[i],maxValue);      
        return maxValue;
    }
    int totalTime(int []piles,int hours,int n){
        int totalHours=0;
        for(int i=0;i<n;i++){
            totalHours+=Math.ceil((double)piles[i]/hours);
        }
        return totalHours;
    }
    public int minEatingSpeed(int[] piles, int h) {
        int n=piles.length;
        int low=1;
        int high=max(piles,n);
        int ans=1;
        while(low<=high){
            int mid=(low+high)/2;
            if(totalTime(piles,mid,n)<=h){
                ans=mid;
                high=mid-1;
            }
            else 
             low=mid+1;
        }
        return ans;
        
    }
}
          
