class Solution {
    int firstOcurrence(int[]nums,int n,int target){
        int low=0;
        int high=n-1;
        int ans=-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                ans=mid;
                high=mid-1;
            }
            else if(nums[mid]>target)
             high=mid-1;
            else
             low=mid+1;
        }
        return ans;

    }
    int lastOcurrence(int[]nums,int n,int target){
        int low=0;
        int high=n-1;
        int ans=-1;
        while(low<=high){
            int mid=(low+high)/2;
            if(nums[mid]==target){
                ans=mid;
                low=mid+1;
            }
            else if(nums[mid]>target)
             high=mid-1;
            else
             low=mid+1;
        }
        return ans;
        
    }
    public int[] searchRange(int[] nums, int target) {
        int n=nums.length;
        int first=firstOcurrence(nums,n,target);
        if(first==-1)
         return new int[]{-1,-1};
        return new int[]{first,lastOcurrence(nums,n,target)};
        
    }
}
 
