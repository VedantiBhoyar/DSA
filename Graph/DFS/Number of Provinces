class Solution {
    public int findCircleNum(int[][] isConnected) {
        ArrayList<ArrayList<Integer>>list=new ArrayList<>();
        int V=isConnected.length;
        int count=0;
        boolean visited[]=new boolean[V];

        for(int i=0;i<V;i++)
         list.add(new ArrayList<>());
        
        for(int i=0;i<V;i++){
            for(int j=0;j<V;j++){
                if(isConnected[i][j]==1 && i!=j){
                    list.get(i).add(j);
                    list.get(j).add(i);
                }
            }
        }

        for(int i=0;i<V;i++){
            if(!visited[i]){
                dfs(i,list,visited);
                count++;
            }
        }
        return count;
        
    }
    void dfs(int Node,ArrayList<ArrayList<Integer>>list,boolean visited[]){
        visited[Node]=true;
        for(int i:list.get(Node)){
            if(!visited[i])
             dfs(i,list,visited);
        }
    }
}

// 1 1 0
// 1 1 0
// 0 0 1 


// 0 Node->{1,0}
// 1 Node->{0,1}
// 2 Node->{}
