class Solution {
     boolean dfs(int Node,int[][]graph,int visited[],int pathVisited[]
    ,int []check){

        visited[Node]=1;
        pathVisited[Node]=1;
        check[Node]=0;

        for(int adj:graph[Node]){
            if(visited[adj]==0){
                if(dfs(adj,graph,visited,pathVisited,check)==true)
                 return true;
            }
            else{
              if(pathVisited[adj]==1)
               return true;
            }
        }
        check[Node]=1;
        pathVisited[Node]=0;
        return false;
    }
    public List<Integer> eventualSafeNodes(int[][] graph) {
        int n=graph.length;
        int visited[]=new int[n];
        int pathVisited[]=new int[n];
        int check[]=new int[n];

        for(int i=0;i<n;i++){
            if(visited[i]==0)
                dfs(i,graph,visited,pathVisited,check);
        }
        List<Integer>list=new ArrayList<>();
        for(int i=0;i<n;i++){
            if(check[i]==1)
             list.add(i);
        }
        return list;
    }
}


  
