
class Pair{
    int first;
    int second;
    Pair(int first,int second){
        this.first=first;
        this.second=second;
    }
}
class Solution {
    // Function to find the number of islands.
    public int numIslands(char[][] grid) {
        // Code here
        int n=grid.length;
        int m=grid[0].length;
        int count=0;

        int visited[][]=new int[n][m];
        for(int row=0;row<n;row++){
            for(int col=0;col<m;col++){
                if(grid[row][col]=='1' && visited[row][col]==0){
                    count++;
                    bfs(row,col,visited,grid);
                }
            }
        }
        return count;
    }
     void bfs(int r,int c,int[][]visited,char grid[][]){

        visited[r][c]=1;
        Queue<Pair>queue=new LinkedList<>();
        queue.add(new Pair(r,c));

        int n=grid.length;
        int m=grid[0].length;
        
        while(!queue.isEmpty()){
            int row=queue.peek().first;
            int col=queue.peek().second;
            queue.remove();

            for(int deltaRow=-1;deltaRow<=1;deltaRow++){
                 for(int deltaCol=-1;deltaCol<=1;deltaCol++){
                     int nrow=deltaRow+row;
                     int ncol=deltaCol+col;

                     if(nrow>=0 && ncol>=0 && nrow<n && ncol<m && 
                     visited[nrow][ncol]==0 && grid[nrow][ncol]=='1'){
                         visited[nrow][ncol]=1;
                         queue.add(new Pair(nrow,ncol));
                     }
                }
            }
        }
       
   }
}
