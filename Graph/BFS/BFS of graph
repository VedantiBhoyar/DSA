// Given a directed graph. The task is to do Breadth First Traversal of this graph starting from 0.
// Note: One can move from node u to node v only if there's an edge from u to v. Find the BFS traversal 
//of the graph starting from the 0th vertex, from left to right according to the input graph. Also, you should 
//only take nodes directly or indirectly connected from Node 0 in consideration.

class Solution {
    // Function to return Breadth First Traversal of given graph.
    public ArrayList<Integer> bfsOfGraph(int V, ArrayList<ArrayList<Integer>> adj) {
        // Code here
        ArrayList<Integer>list=new ArrayList<>();
        boolean visited[]=new boolean[V];
        Queue<Integer>queue=new LinkedList<>();
        
        visited[0]=true;
        queue.add(0);
        
        while(!queue.isEmpty()){
            Integer node=queue.poll();
            list.add(node);
           
            for(Integer i:adj.get(node)){
                if(!visited[i]){
                    visited[i]=true;
                    queue.add(i);
                }
           }
        }
        return list;
    }
}
