class Pair{
    int first;
    int second;
    int third;
    Pair(int first,int second,int third){
        this.first=first;
        this.second=second;
        this.third=third;
    }
}
class Solution {
    public int[][] updateMatrix(int[][] mat) {
        int n=mat.length;
        int m=mat[0].length;
        int res[][]=new int[n][m];
        int visited[][]=new int[n][m];
        Queue<Pair>queue=new LinkedList<>();

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(mat[i][j]==0){
                    queue.add(new Pair(i,j,0));
                    visited[i][j]=1;
                }
                else{
                    visited[i][j]=0;
                }
            }
        }
        while(!queue.isEmpty()){
            int row=queue.peek().first;
            int col=queue.peek().second;
            int steps=queue.peek().third;
            queue.remove();

            res[row][col]=steps;
            int deltaRow[]={0,-1,0,1};
            int deltaCol[]={-1,0,1,0};

            for(int i=0;i<4;i++){
                int nrow=row+deltaRow[i];
                int ncol=col+deltaCol[i];

                if(nrow>=0 && ncol>=0 && nrow<n && ncol<m && visited[nrow][ncol]==0){
                    visited[nrow][ncol]=1;
                    queue.add(new Pair(nrow,ncol,steps+1));
                }
            }

        }
        return res;
        
    }
}
