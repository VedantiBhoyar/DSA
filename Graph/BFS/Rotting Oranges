class Pair{
    int first;
    int second;
    int third;
    Pair(int first,int second,int third){
        this.first=first;
        this.second=second;
        this.third=third;
    }
}
class Solution {
    public int orangesRotting(int[][] grid) {
        int n=grid.length;
        int m=grid[0].length;
        int freshCount=0;

        int visited[][]=new int[n][m];
        Queue<Pair>queue=new LinkedList<>();

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j]==2){
                    queue.add(new Pair(i,j,0));
                    visited[i][j]=2;
                }
                else{
                   visited[i][j]=0;
                }
                 
                if(grid[i][j]==1)
                  freshCount++;
            }  
        }
        
        int deltarow[]={-1,0,1,0};
        int deltacol[]={0,1,0,-1};
        int t=0;
        int count=0;

        while(!queue.isEmpty()){
            int row=queue.peek().first;
            int col=queue.peek().second;
            int tm=queue.peek().third;
            queue.remove();

            t=Math.max(t,tm);

            for(int i=0;i<4;i++){
                int nrow=row+deltarow[i];
                int ncol=col+deltacol[i];

                if(nrow>=0 && ncol>=0 && nrow<n && ncol<m &&
                visited[nrow][ncol]==0 && grid[nrow][ncol]==1){
                    visited[nrow][ncol]=2;
                    queue.add(new Pair(nrow,ncol,tm+1));
                    count++;
                }
            }
        }
          if(count!=freshCount)
           return -1;
          return t;
    }
}



