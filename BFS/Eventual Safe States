//{ Driver Code Starts
// Initial Template for Java

import java.util.*;
import java.lang.*;
import java.io.*;

// Position this line where user code will be pasted.

class GFG {
    public static void main(String[] args) throws IOException {
        Scanner sc = new Scanner(System.in);
        int T = sc.nextInt();
        while (T-- > 0) {
            int V = sc.nextInt();
            int E = sc.nextInt();

            List<List<Integer>> adj = new ArrayList<>();

            for (int i = 0; i < V; i++) {
                adj.add(new ArrayList<>());
            }
            for (int i = 0; i < E; i++) {
                int u = sc.nextInt();
                int v = sc.nextInt();

                adj.get(u).add(v);
            }

            Solution obj = new Solution();
            List<Integer> safeNodes = obj.eventualSafeNodes(V, adj);
            for (int i : safeNodes) {
                System.out.print(i + " ");
            }
            System.out.println();
        }
    }
}
// } Driver Code Ends


// User function Template for Java

class Solution {

    List<Integer> eventualSafeNodes(int V, List<List<Integer>> adj) {

        // Your code here'
        ArrayList<ArrayList<Integer>>revAdj=new ArrayList<>();
        for(int i=0;i<V;i++)
          revAdj.add(new ArrayList<>());
          
        for(int i=0;i<V;i++){
            for(int it:adj.get(i)){
                revAdj.get(it).add(i);
            }
        }
        int indegree[]=new int[V];
        for(int i=0;i<V;i++){
            for(int it:revAdj.get(i))
              indegree[it]++;
        }
        Queue<Integer>queue=new LinkedList<>();
        List<Integer>list=new ArrayList<>();
        
        for(int i=0;i<V;i++){
            if(indegree[i]==0)
              queue.add(i);
        }
        while(!queue.isEmpty()){
            int node=queue.poll();
            list.add(node);
            
            for(int it:revAdj.get(node)){
                indegree[it]--;
                if(indegree[it]==0)
                 queue.add(it);
            }
        }
        Collections.sort(list);
        return list;
        
    }
}
