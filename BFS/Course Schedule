class Solution {
    public boolean canFinish(int numCourses, int[][] prerequisites) {
        ArrayList<ArrayList<Integer>>list=new ArrayList<>();
        for(int i=0;i<numCourses;i++)
          list.add(new ArrayList<>());
        
        int n=prerequisites.length;
        for(int i=0;i<n;i++){
            list.get(prerequisites[i][0]).add(prerequisites[i][1]);
        }

        int indegree[]=new int[numCourses];
        for(int i=0;i<numCourses;i++){
            for(int it:list.get(i))
              indegree[it]++;
        }

        Queue<Integer>queue=new LinkedList<>();
        for(int i=0;i<numCourses;i++){
            if(indegree[i]==0)
             queue.add(i);
        }
        List<Integer>res=new ArrayList<>();
        while(!queue.isEmpty()){
            int node=queue.poll();
             res.add(node);

            for(int it:list.get(node)){
                indegree[it]--;
                if(indegree[it]==0)
                  queue.add(it);
            }
        }
        if(res.size()==numCourses)
          return true;
        return false;
    }
}
