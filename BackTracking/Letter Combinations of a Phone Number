class Solution {
    public List<String> letterCombinations(String digits) {
        List<String>res=new ArrayList<>();
        if(digits.length()==0)
         return res;
        HashMap<String,String>map=new HashMap<>();
        map.put("2","abc");
        map.put("3","def");
        map.put("4","ghi");
        map.put("5","jkl");
        map.put("6","mno");
        map.put("7","pqrs");
        map.put("8","tuv");
        map.put("9","wxyz");
        Deque<String>deck=new ArrayDeque<>();
        deck.add("");
        for(int i=0;i<digits.length();i++){
            String num=digits.substring(i,i+1);
            String fromMap=map.get(num);
            int n=deck.size();
            for(int k=0;k<n;k++){
                String pull=deck.pollFirst();
                for(int j=0;j<fromMap.length();j++){
                  String temp=pull.concat(fromMap.charAt(j)+"");
                  deck.add(temp);
            }
        } 
    }
        while(!deck.isEmpty())
         res.add(deck.poll());
        
    return res;
        
    }
}

//          2                    3
//         /   \  \            /  \  \
//         a   b   c          d    e  f

// deque []
// deque [a][b][c]
// deque [b][c][ad][ae][af]
// deque [c][ad][ae][af][bd][be][bf]
// deque [ad][ae][af][bd][be][bf][cd][ce][cf]

// combination
// 1-3
// 2-9
// 3-27
// n=length
// 3^n



